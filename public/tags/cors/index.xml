<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CORS on Benjamin Listwon</title>
    <link>https://benjaminlistwon.com/tags/cors/</link>
    <description>Recent content in CORS on Benjamin Listwon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Feb 2016 10:00:00 -0700</lastBuildDate>
    
	<atom:link href="https://benjaminlistwon.com/tags/cors/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>In Brief #001: Routing With CORS</title>
      <link>https://benjaminlistwon.com/blog/in-brief-001-routing-with-cors/</link>
      <pubDate>Thu, 25 Feb 2016 10:00:00 -0700</pubDate>
      
      <guid>https://benjaminlistwon.com/blog/in-brief-001-routing-with-cors/</guid>
      <description>If youâ€™re building an API for your app, chances are you have to build in support for CORS. Doing so in Laravel is pretty straightforward, especially if you snag the laravel-cors package from Barry van den Heuvel.
After adding laravel-cors to your project, you can just add route code like any of these:
Route::post(&#39;train&#39;, function() { return &#39;Choo, Choo!&#39;; })-&amp;gt;middleware(&#39;cors&#39;); Route::post(&#39;boat&#39;, [&#39;middleware&#39; =&amp;gt; &#39;cors&#39;, function() { return &#39;Hooooonk!&#39;; }]); Route::group([&#39;middleware&#39; =&amp;gt; &#39;cors&#39;], function($router){ $router-&amp;gt;post(&#39;car&#39;, function() { return &#39;Meep, Meep!</description>
    </item>
    
  </channel>
</rss>