<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Migration on Benjamin Listwon</title>
    <link>https://benjaminlistwon.com/tags/migration/</link>
    <description>Recent content in Migration on Benjamin Listwon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Feb 2016 10:00:00 -0700</lastBuildDate>
    
	<atom:link href="https://benjaminlistwon.com/tags/migration/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>In Brief #002: Updating Rows In A Migration</title>
      <link>https://benjaminlistwon.com/blog/in-brief-002-updating-rows-in-a-migration/</link>
      <pubDate>Mon, 29 Feb 2016 10:00:00 -0700</pubDate>
      
      <guid>https://benjaminlistwon.com/blog/in-brief-002-updating-rows-in-a-migration/</guid>
      <description>Laravel Migrations are a great way to manage your database tables. If you add Doctrine to your composer dependencies, then you can easily alter a table’s columns, indices and loads of other properties, without changing the way you write migrations.
Sometimes, when you alter a table to add a new column, you want to populate it with values. There’s a couple ways to do this for basic operations.
 If your column will allow a default value, you can add it as part of the migration itself $table-&amp;gt;string(&#39;colName&#39;)-&amp;gt;default(&#39;foo&#39;); You can use a Seeder to insert rows, or to run just about any query you’d like.</description>
    </item>
    
  </channel>
</rss>