<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Benjamin Listwon</title>
    <link>https://benjaminlistwon.com/tags/javascript/</link>
    <description>Recent content in Javascript on Benjamin Listwon</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Nov 2016 10:00:00 -0700</lastBuildDate>
    
	<atom:link href="https://benjaminlistwon.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Strategies for extending Vue</title>
      <link>https://benjaminlistwon.com/blog/strategies-for-extending-vue/</link>
      <pubDate>Fri, 04 Nov 2016 10:00:00 -0700</pubDate>
      
      <guid>https://benjaminlistwon.com/blog/strategies-for-extending-vue/</guid>
      <description>A few weeks back, someone reached out over email with a question about how to add support for capturing mouse events that took place within the bounds of a Vue component. Off the top of my head I could think of couple ways to do it, but none of them were very sustainable or extensible.
So I did the only thing I know to do in such a situation; I whipped up some code and compared the different ways of achieving the same goals in Vue.</description>
    </item>
    
    <item>
      <title>Vuex Chat Part 2</title>
      <link>https://benjaminlistwon.com/blog/vuex-chat-part-2/</link>
      <pubDate>Wed, 28 Sep 2016 10:00:00 -0700</pubDate>
      
      <guid>https://benjaminlistwon.com/blog/vuex-chat-part-2/</guid>
      <description>In my last post, we took a look at how you might implement shared state in your Vue.js app by comparing a vuex implementation with a hand-coded alternative. Incorporating vuex, as we saw, is pretty straightforward once the core concept of one-way data flow in Vue makes sense.
This time, I&amp;rsquo;d like to take the demo a little further by introducing modules, constants for mutation names, and organizing our actions a bit differently.</description>
    </item>
    
    <item>
      <title>Data Flow in Vue and Vuex</title>
      <link>https://benjaminlistwon.com/blog/data-flow-in-vue-and-vuex/</link>
      <pubDate>Wed, 21 Sep 2016 10:00:00 -0700</pubDate>
      
      <guid>https://benjaminlistwon.com/blog/data-flow-in-vue-and-vuex/</guid>
      <description>&lt;p&gt;&lt;em&gt;(Update 10/14/16: This article has been &lt;a href=&#34;http://www.jianshu.com/p/2e0b6d19dd6a&#34;&gt;translated into simplified Chinese&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/sqrtthree&#34;&gt;@sqrtthree&lt;/a&gt;. Also &lt;a href=&#34;http://gold.xitu.io/entry/58007bcf0bd1d00058eefe69/&#34;&gt;available here&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It seems like one of the things that trips people up in &lt;a href=&#34;https://vuejs.org&#34;&gt;Vue&lt;/a&gt; is how to share state across components. For those new to reactive programming, something like &lt;a href=&#34;https://github.com/vuejs/vuex/&#34;&gt;vuex&lt;/a&gt; can seem daunting with loads of new jargon and the way it separates concerns. It can also seem like overkill when all you want is to share one or two pieces of data.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Short Order Vue: A Vue 2.0 App</title>
      <link>https://benjaminlistwon.com/blog/short-order-vue-a-vue-20-app/</link>
      <pubDate>Fri, 16 Sep 2016 10:00:00 -0700</pubDate>
      
      <guid>https://benjaminlistwon.com/blog/short-order-vue-a-vue-20-app/</guid>
      <description>On Wednesday I shared some of the resources I‚Äôve been using to move from previous releases of Vue to the new Vue 2.0 API. (BTW: I‚Äôve got a few more links to add, thanks to some great folks on Twitter.) The biggest changes in 2.0 aren‚Äôt really in the API itself, but there are a few tricky bits here and there.
As I‚Äôve proceeded, I‚Äôve found it is a little easier to just start some mini projects from scratch to test out some of the new functionality, as opposed to trying to reason about how to rewrite old code.</description>
    </item>
    
    <item>
      <title>Vue 2.0</title>
      <link>https://benjaminlistwon.com/blog/vue-20/</link>
      <pubDate>Wed, 14 Sep 2016 10:00:00 -0700</pubDate>
      
      <guid>https://benjaminlistwon.com/blog/vue-20/</guid>
      <description>(Update 11/14/16: This article has been translated into Japanese by Chiharu Shibata.)
A couple weeks back I got back from holiday, my son started the new school year, and once again the home office was calm and quiet. While I was away, someone had reached out about a Vue component I mentioned I was writing to use a Handsontable (HOT) in a Vue app. I mentioned that I was about to start converting it over to Vue 2.</description>
    </item>
    
    <item>
      <title>Vue.js Resources</title>
      <link>https://benjaminlistwon.com/resource/vue/</link>
      <pubDate>Wed, 14 Sep 2016 10:00:00 -0700</pubDate>
      
      <guid>https://benjaminlistwon.com/resource/vue/</guid>
      <description>This page contains resources related to the Vue.js framework, as well as the major modules and plugins in the Vue.js ecosystem (vuex, vue-router, etc). As always, if thee&amp;rsquo;s something I&amp;rsquo;m missing, go ahead and let me know, and I will add it.
Community  Vue Forum Definitely join. Loads of discussion, group problem solving, and searchable posts. Vue on Gitter Like a Slack/IRC channel, specifically for Vue.js discussion. Vue Newsletter üÜï Stay up-to-date on all things Vue.</description>
    </item>
    
    <item>
      <title>A Case For Writing It Yourself</title>
      <link>https://benjaminlistwon.com/blog/a-case-for-writing-it-yourself/</link>
      <pubDate>Thu, 11 Aug 2016 10:00:00 -0700</pubDate>
      
      <guid>https://benjaminlistwon.com/blog/a-case-for-writing-it-yourself/</guid>
      <description>Over the years I‚Äôve vacillated between the two extremes of ‚Äúroll your own code‚Äù and ‚Äúthrow together a bunch of libraries.‚Äù I suspect I‚Äôm not alone in this endless pursuit of ‚Äúthe best‚Äù way to build software.
In the end, we all know that each project is unique, and perhaps more importantly, its requirements will change with time. A library you rely upon today may not have all the capabilities you need tomorrow, or perhaps, after real usage data pours in, you realize you only need 1/100th of some module‚Äôs functionality and that you can easily write that bit on your own.</description>
    </item>
    
    <item>
      <title>When To Look Beyond jQuery</title>
      <link>https://benjaminlistwon.com/blog/when-to-look-beyond-jquery/</link>
      <pubDate>Tue, 12 Apr 2016 10:00:00 -0700</pubDate>
      
      <guid>https://benjaminlistwon.com/blog/when-to-look-beyond-jquery/</guid>
      <description>(Update: Forgot to include ScrollMagic. Big oops!)
Before I continue, I wanted to set forth what this post is about. It is not a teardown of jQuery or a preachy case for using such-and-such a JavaScript framework.
Rather, it is an acknowledgement of two things:
 If your target is modern browsers (really anything post IE8) and you are building something of modest size, then any library or framework, jQuery or otherwise, may be overkill.</description>
    </item>
    
    <item>
      <title>Getting Started With Vue.js</title>
      <link>https://benjaminlistwon.com/blog/getting-started-with-vuejs/</link>
      <pubDate>Fri, 18 Mar 2016 10:00:00 -0700</pubDate>
      
      <guid>https://benjaminlistwon.com/blog/getting-started-with-vuejs/</guid>
      <description>(Update: The folks at Vue made an even easier startup template. I wrote a quick post about it here.)
Since Polymer went 1.0, I have built a couple small, personal projects with it. Those experiences have gone great, but some of the rigidity of Polymer‚Äôs elements and API continued to bug me.
Now I‚Äôm working on shipping my first public project in a while, and I‚Äôve bumped into some challenges with Polymer.</description>
    </item>
    
  </channel>
</rss>